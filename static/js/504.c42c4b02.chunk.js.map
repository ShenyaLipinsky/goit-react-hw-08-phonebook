{"version":3,"file":"static/js/504.c42c4b02.chunk.js","mappings":"iRAGaA,GAAcC,EAAAA,EAAAA,IAAOC,EAAAA,EAAAA,QAAPD,CAAH,2FAMXE,EAAkBF,EAAAA,GAAAA,IAAH,oK,UCyH5B,EA1HqB,WACnB,IAAMG,GAAWC,EAAAA,EAAAA,MAaXC,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CC,KAAMF,EAAAA,KAEHG,QALH,yHAGM,4IAMHC,IAAI,EAAG,0CACPC,SAAS,qBACZC,MAAON,EAAAA,KAEJM,MAAM,kCACND,SAAS,sBACZE,SAAUP,EAAAA,KAEPI,IAAI,EAAG,6CACPC,SAAS,2BAGd,OACE,SAAC,KAAD,CACEG,cAAe,CACbN,KAAM,GACNI,MAAO,GACPC,SAAU,IAEZR,iBAAkBA,EAClBU,SAAU,SAACC,EAAD,GAA2C,IAAhCC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,WAtCf,SAAC,GAA+B,IAA7BV,EAA4B,EAA5BA,KAAMI,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACvCV,EAASgB,EAAAA,EAAAA,SAAwB,CAAEX,KAAAA,EAAMI,MAAAA,EAAOC,SAAAA,KAsC5CO,CAAiBJ,GACjBC,GAAc,GACdC,IACAD,GAAc,IAXlB,SAcG,YAOM,IANLD,EAMI,EANJA,OACAK,EAKI,EALJA,OACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,aACAC,EAEI,EAFJA,aACAC,EACI,EADJA,aAEA,OACE,UAACxB,EAAA,EAAD,CAAMO,KAAK,eAAekB,YAAU,EAACX,SAAUS,EAA/C,WACE,UAACvB,EAAA,QAAD,CAAY0B,UAAU,OAAOC,UAAU,gBAAvC,WACE,SAAC3B,EAAA,QAAD,qBACA,SAACF,EAAD,CACE8B,KAAK,OACLrB,KAAK,OACLsB,YAAY,aACZC,MAAOf,EAAOR,KACdwB,SAAUT,EACVI,UAAWL,EAAQd,MAAQa,EAAOb,KAAO,QAAU,KACnDG,UAAQ,IAETW,EAAQd,MAAQa,EAAOb,MACtB,SAACN,EAAD,CAAiByB,UAAU,gBAA3B,SACGN,EAAOb,OAER,SAGN,UAACP,EAAA,QAAD,CAAY0B,UAAU,OAAOC,UAAU,iBAAvC,WACE,SAAC3B,EAAA,QAAD,sBACA,SAACF,EAAD,CACE8B,KAAK,QACLrB,KAAK,QACLsB,YAAY,cACZC,MAAOf,EAAOJ,MACdoB,SAAUT,EACVI,UAAWL,EAAQV,OAASS,EAAOT,MAAQ,QAAU,KACrDD,UAAQ,IAETW,EAAQV,OAASS,EAAOT,OACvB,SAACV,EAAD,CAAiByB,UAAU,gBAA3B,SACGN,EAAOT,QAER,SAGN,UAACX,EAAA,QAAD,CAAY0B,UAAU,OAAOC,UAAU,oBAAvC,WACE,SAAC3B,EAAA,QAAD,yBACA,SAACF,EAAD,CACE8B,KAAK,WACLrB,KAAK,WACLsB,YAAY,WACZC,MAAOf,EAAOH,SACdmB,SAAUT,EACVI,UAAWL,EAAQT,UAAYQ,EAAOR,SAAW,QAAU,KAC3DF,UAAQ,IAETW,EAAQT,UAAYQ,EAAOR,UAC1B,SAACX,EAAD,CAAiByB,UAAU,gBAA3B,SACGN,EAAOR,WAER,SAGN,SAACoB,EAAA,EAAD,CAAQC,QAAQ,UAAUL,KAAK,SAASM,SAAUV,EAAlD","sources":["components/Registration/Registration.styled.js","components/Registration/Registration.js"],"sourcesContent":["import { Form } from 'react-bootstrap';\nimport styled from 'styled-components';\n\nexport const InputStyled = styled(Form.Control)`\n  width: 250px;\n  &.error {\n    border: 2px solid #ff6565;\n  }\n`;\nexport const ErrorMessageBox = styled.div`\n  &.error-message {\n    color: #ff6565;\n    padding: 0.5em 0.2em;\n    height: 1em;\n    position: absolute;\n    font-size: 0.8em;\n  }\n`;\n","import { Formik } from 'formik';\nimport * as yup from 'yup';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport { useDispatch } from 'react-redux';\nimport { authOperations } from 'redux/auth/authOperations';\nimport { ErrorMessageBox, InputStyled } from './Registration.styled';\n\nconst Registration = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmitForm = ({ name, email, password }) => {\n    dispatch(authOperations.register({ name, email, password }));\n  };\n\n  //email: \"shenyalipinskiy@gmail.com\"\n  //name: 'Eugene';\n  //password: '123456789';\n\n  const nameRegExp =\n    /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\n\n  const validationSchema = yup.object().shape({\n    name: yup\n      .string()\n      .matches(\n        nameRegExp,\n        `*Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan'`\n      )\n      .min(2, '*Name must have more than 2 characters')\n      .required('*Name is required'),\n    email: yup\n      .string()\n      .email('*Must be a valid email address')\n      .required('*Email is required'),\n    password: yup\n      .string()\n      .min(7, '*Password must have at least 7 characters')\n      .required('*Password is required'),\n  });\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        email: '',\n        password: '',\n      }}\n      validationSchema={validationSchema}\n      onSubmit={(values, { setSubmitting, resetForm }) => {\n        handleSubmitForm(values);\n        setSubmitting(true);\n        resetForm();\n        setSubmitting(false);\n      }}\n    >\n      {({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleSubmit,\n        isSubmitting,\n      }) => {\n        return (\n          <Form name=\"registration\" noValidate onSubmit={handleSubmit}>\n            <Form.Group className=\"mb-5\" controlId=\"formBasicName\">\n              <Form.Label>Name:</Form.Label>\n              <InputStyled\n                type=\"name\"\n                name=\"name\"\n                placeholder=\"Enter name\"\n                value={values.name}\n                onChange={handleChange}\n                className={touched.name && errors.name ? 'error' : null}\n                required\n              />\n              {touched.name && errors.name ? (\n                <ErrorMessageBox className=\"error-message\">\n                  {errors.name}\n                </ErrorMessageBox>\n              ) : null}\n            </Form.Group>\n\n            <Form.Group className=\"mb-5\" controlId=\"formBasicEmail\">\n              <Form.Label>Email:</Form.Label>\n              <InputStyled\n                type=\"email\"\n                name=\"email\"\n                placeholder=\"Enter email\"\n                value={values.email}\n                onChange={handleChange}\n                className={touched.email && errors.email ? 'error' : null}\n                required\n              />\n              {touched.email && errors.email ? (\n                <ErrorMessageBox className=\"error-message\">\n                  {errors.email}\n                </ErrorMessageBox>\n              ) : null}\n            </Form.Group>\n\n            <Form.Group className=\"mb-5\" controlId=\"formBasicPassword\">\n              <Form.Label>Password:</Form.Label>\n              <InputStyled\n                type=\"password\"\n                name=\"password\"\n                placeholder=\"Password\"\n                value={values.password}\n                onChange={handleChange}\n                className={touched.password && errors.password ? 'error' : null}\n                required\n              />\n              {touched.password && errors.password ? (\n                <ErrorMessageBox className=\"error-message\">\n                  {errors.password}\n                </ErrorMessageBox>\n              ) : null}\n            </Form.Group>\n\n            <Button variant=\"primary\" type=\"submit\" disabled={isSubmitting}>\n              Register\n            </Button>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default Registration;\n"],"names":["InputStyled","styled","Form","ErrorMessageBox","dispatch","useDispatch","validationSchema","yup","shape","name","matches","min","required","email","password","initialValues","onSubmit","values","setSubmitting","resetForm","authOperations","handleSubmitForm","errors","touched","handleChange","handleSubmit","isSubmitting","noValidate","className","controlId","type","placeholder","value","onChange","Button","variant","disabled"],"sourceRoot":""}
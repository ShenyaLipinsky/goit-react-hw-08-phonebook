{"version":3,"file":"static/js/27.c8c54088.chunk.js","mappings":"gRAGaA,GAAcC,EAAAA,EAAAA,IAAOC,EAAAA,EAAAA,QAAPD,CAAH,2FAMXE,EAAkBF,EAAAA,GAAAA,IAAH,oK,UC0F5B,EA3Fc,WACZ,IAAMG,GAAWC,EAAAA,EAAAA,MASXC,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CC,MAAOF,EAAAA,KAEJE,MAAM,kCACNC,SAAS,sBACZC,SAAUJ,EAAAA,KAEPK,IAAI,EAAG,6CACPF,SAAS,2BAGd,OACE,SAAC,KAAD,CACEG,cAAe,CACbJ,MAAO,GACPE,SAAU,IAEZL,iBAAkBA,EAClBQ,SAAU,SAACC,EAAD,GAA2C,IAAhCC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,WA1Bf,SAAC,GAAyB,IAAvBR,EAAsB,EAAtBA,MAAOE,EAAe,EAAfA,SACjCP,EAASc,EAAAA,EAAAA,MAAqB,CAAET,MAAAA,EAAOE,SAAAA,KA0BnCQ,CAAiBJ,GACjBC,GAAc,GACdC,IACAD,GAAc,IAVlB,SAaG,YAOM,IANLD,EAMI,EANJA,OACAK,EAKI,EALJA,OACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,aACAC,EAEI,EAFJA,aACAC,EACI,EADJA,aAEA,OACE,UAACtB,EAAA,EAAD,CAAMuB,KAAK,eAAeC,YAAU,EAACZ,SAAUS,EAA/C,WACE,UAACrB,EAAA,QAAD,CAAYyB,UAAU,OAAOC,UAAU,iBAAvC,WACE,SAAC1B,EAAA,QAAD,sBACA,SAACF,EAAD,CACE6B,KAAK,QACLJ,KAAK,QACLK,YAAY,cACZC,MAAOhB,EAAON,MACduB,SAAUV,EACVK,UAAWN,EAAQZ,OAASW,EAAOX,MAAQ,QAAU,KACrDC,UAAQ,IAETW,EAAQZ,OAASW,EAAOX,OACvB,SAACN,EAAD,CAAiBwB,UAAU,gBAA3B,SACGP,EAAOX,QAER,SAGN,UAACP,EAAA,QAAD,CAAYyB,UAAU,OAAOC,UAAU,oBAAvC,WACE,SAAC1B,EAAA,QAAD,yBACA,SAACF,EAAD,CACE6B,KAAK,WACLJ,KAAK,WACLK,YAAY,WACZC,MAAOhB,EAAOJ,SACdqB,SAAUV,EACVK,UAAWN,EAAQV,UAAYS,EAAOT,SAAW,QAAU,KAC3DD,UAAQ,IAETW,EAAQV,UAAYS,EAAOT,UAC1B,SAACR,EAAD,CAAiBwB,UAAU,gBAA3B,SACGP,EAAOT,WAER,SAGN,SAACsB,EAAA,EAAD,CAAQC,QAAQ,UAAUL,KAAK,SAASM,SAAUX,EAAlD","sources":["components/LogIn/LogIn.styled.js","components/LogIn/LogIn.js"],"sourcesContent":["import { Form } from 'react-bootstrap';\nimport styled from 'styled-components';\n\nexport const InputStyled = styled(Form.Control)`\n  width: 250px;\n  &.error {\n    border: 2px solid #ff6565;\n  }\n`;\nexport const ErrorMessageBox = styled.div`\n  &.error-message {\n    color: #ff6565;\n    padding: 0.5em 0.2em;\n    height: 1em;\n    position: absolute;\n    font-size: 0.8em;\n  }\n`;\n","import { Formik } from 'formik';\nimport * as yup from 'yup';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport { useDispatch } from 'react-redux';\nimport { authOperations } from 'redux/auth/authOperations';\nimport { ErrorMessageBox, InputStyled } from './LogIn.styled';\n\nconst LogIn = () => {\n  const dispatch = useDispatch();\n  const handleSubmitForm = ({ email, password }) => {\n    dispatch(authOperations.logIn({ email, password }));\n  };\n\n  //email: \"shenyalipinskiy@gmail.com\"\n  //name: 'Eugene';\n  //password: '123456789';\n\n  const validationSchema = yup.object().shape({\n    email: yup\n      .string()\n      .email('*Must be a valid email address')\n      .required('*Email is required'),\n    password: yup\n      .string()\n      .min(7, '*Password must have at least 7 characters')\n      .required('*Password is required'),\n  });\n\n  return (\n    <Formik\n      initialValues={{\n        email: '',\n        password: '',\n      }}\n      validationSchema={validationSchema}\n      onSubmit={(values, { setSubmitting, resetForm }) => {\n        handleSubmitForm(values);\n        setSubmitting(true);\n        resetForm();\n        setSubmitting(false);\n      }}\n    >\n      {({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleSubmit,\n        isSubmitting,\n      }) => {\n        return (\n          <Form name=\"registration\" noValidate onSubmit={handleSubmit}>\n            <Form.Group className=\"mb-5\" controlId=\"formBasicEmail\">\n              <Form.Label>Email:</Form.Label>\n              <InputStyled\n                type=\"email\"\n                name=\"email\"\n                placeholder=\"Enter email\"\n                value={values.email}\n                onChange={handleChange}\n                className={touched.email && errors.email ? 'error' : null}\n                required\n              />\n              {touched.email && errors.email ? (\n                <ErrorMessageBox className=\"error-message\">\n                  {errors.email}\n                </ErrorMessageBox>\n              ) : null}\n            </Form.Group>\n\n            <Form.Group className=\"mb-5\" controlId=\"formBasicPassword\">\n              <Form.Label>Password:</Form.Label>\n              <InputStyled\n                type=\"password\"\n                name=\"password\"\n                placeholder=\"Password\"\n                value={values.password}\n                onChange={handleChange}\n                className={touched.password && errors.password ? 'error' : null}\n                required\n              />\n              {touched.password && errors.password ? (\n                <ErrorMessageBox className=\"error-message\">\n                  {errors.password}\n                </ErrorMessageBox>\n              ) : null}\n            </Form.Group>\n\n            <Button variant=\"primary\" type=\"submit\" disabled={isSubmitting}>\n              Login\n            </Button>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default LogIn;\n"],"names":["InputStyled","styled","Form","ErrorMessageBox","dispatch","useDispatch","validationSchema","yup","shape","email","required","password","min","initialValues","onSubmit","values","setSubmitting","resetForm","authOperations","handleSubmitForm","errors","touched","handleChange","handleSubmit","isSubmitting","name","noValidate","className","controlId","type","placeholder","value","onChange","Button","variant","disabled"],"sourceRoot":""}